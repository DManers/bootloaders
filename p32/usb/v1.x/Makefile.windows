SHELL		=	cmd.exe

########################################################################
#                                                                      #
#	Pinguino Bootloader v0.x                                           #
#	32-bit USB HID Bootloader                                          #
#	Author : Régis Blanchot <rblanchot$(L)gmail.com>                      #
#                                                                      #
#	Usage ex. :                                                        #
#   make --makefile=Makefile.windows PROC=32MX250F128B [DEBUG=yes]     #
#                                                                      #
#	Supported CPU : 32MX250F128B                                       #
#	                32MX270F256B                                       #
#                                                                      #
#	This file is part of Pinguino Project (http:\\www.pinguino.cc)     #
#	Released under the LGPL license (www.gnu.org\licenses\lgpl.html)   #
#                                                                      #
########################################################################

_TEST_ENABLE_   = false
_MIPS16_ENABLE_ = true
_LOG_ENABLE_    = false

# Where to find the gcc-mips-elf toolchain
BINDIR		= C:\pinguino-11\compilers\p32\bin

# ----------------------------------------------------------------------
# Version (will override boot.h #define)
# ----------------------------------------------------------------------

MAJ_VER		= 0
MIN_VER		= 0
DOT_VER		= 2

# ----------------------------------------------------------------------
# Processor family
# ----------------------------------------------------------------------

ifndef PROC
	PROC	= 32MX270F256B
	DEFAULT = YES
endif 

FAMILYMZ	= $(findstring 32MZ,  $(PROC))
FAMILYMX1	= $(findstring 32MX1, $(PROC))
FAMILYMX2	= $(findstring 32MX2, $(PROC))
FAMILY		= $(FAMILYMX1)$(FAMILYMX2)$(FAMILYMZ)

CRYSTAL		= 8

# ----------------------------------------------------------------------
# Verbose
# ----------------------------------------------------------------------

ifeq "$(_LOG_ENABLE_)" "true"
	L=@
endif

# ----------------------------------------------------------------------
# Project's name
# ----------------------------------------------------------------------

ifeq "$(_TEST_ENABLE_)" "true"
	PRJ		= Test
else
	PRJ		= Bootloader_v$(MAJ_VER).$(MIN_VER).$(DOT_VER)_$(PROC)_X$(CRYSTAL)MHz
endif

# ----------------------------------------------------------------------
# Unsupported record in hex file \ Jean-pierre Mandon 2012
# ----------------------------------------------------------------------
#		04		 : 4 bytes
#		0000	 : address
#		05		 : record type = Start_Linear_Address_Record
#		9D004000 : address where the user program should start
#				 : _RESET_ADDR (see lkr\procdefs.ld)
#		1A		 : checksum
# ----------------------------------------------------------------------

ifneq (,$(filter $(FAMILY),32MX1 32MX2))
	BADRECORD   = '^:04000005BFC0000078'
else
	BADRECORD   = '^:040000059D006000FA'
endif

# ----------------------------------------------------------------------
# MIPS Core
# ----------------------------------------------------------------------
# PIC32MX has a MIPS M4K core
# PIC32MZ has a MIPS microAptiv core

ifeq "$(FAMILY)" "32MZ"
	CORE		= m14k
	#CORE		= m14kc
else
	#CORE		= 24kc
	CORE		= m4k
endif

# ----------------------------------------------------------------------
# Directories
# ----------------------------------------------------------------------

#PWDGNU      = $(CURDIR)
#PWDWIN      = $(subst /,\,$(PWDGNU))
#ORIGIN      = $(subst Documents and Settings,'Documents and Settings',$(PWDWIN))

#SRCDIR		= $(ORIGIN)
#HEXDIR		= $(ORIGIN)\hex
#INCDIR		= $(ORIGIN)
#LKRDIR		= $(ORIGIN)\lkr
#OBJDIR		= $(ORIGIN)\obj\non-free

HEXDIR=hex
LKRDIR=lkr
OBJDIR=obj

INCLUDEDIRS	= -I$(LKRDIR) \
			  -I$(OBJDIR) \
			  -I$(OBJDIR)\non-free

#-lm -lgcc -lc
LIBS		=
LIBDIRS		=

# ----------------------------------------------------------------------
# Files
# ----------------------------------------------------------------------

ifeq "$(_TEST_ENABLE_)" "true"
	SRCS	= test.c
else
	ALLSRCS	= $(wildcard *.c)
	SRCS	= $(filter-out test.c, $(ALLSRCS))
endif

OBJS		= $(SRCS:%.c=$(OBJDIR)\%.o)

# ----------------------------------------------------------------------
# Commands
# ----------------------------------------------------------------------

CC			= $(BINDIR)\p32-gcc
OBJCOPY		= $(BINDIR)\p32-objcopy
SIZE		= $(BINDIR)\p32-size
OBJDUMP		= $(BINDIR)\p32-objdump
RM			= del /f /q
CP			= copy
MV			= move

# ----------------------------------------------------------------------
# Flags
# ----------------------------------------------------------------------
# https:\\sourceware.org\binutils\docs\ld\Options.html#Options

ifeq "$(_MIPS16_ENABLE_)" "true"
	# Generate MIPS16 code.
	MIPS16_OPT=-mips16
	# makes non-MIPS16 and MIPS16 code link-compatible.
	MIPS16_INTER=-minterlink-mips16
endif

CFLAGS		= -fdollars-in-identifiers $(INCLUDEDIRS)

LDFLAGS		= $(LIBDIRS) $(LIBS)
#LDFLAGS	   += -G0
#--verbose

#-nostdlib		Only search library directories explicitly specified on the command line
#-static		Do not link against shared libraries
#--strip-all	Omit all symbol information from the output file
#--gc-sections	Enable garbage collection of unused input sections
#-Map=mapfile	Print a link map to the file mapfile
    
ELF_FLAGS	= -march=$(CORE) \
			  -EL -nostdlib -static \
			  -Os $(MIPS16_INTER) \
			  -ffunction-sections \
			  -fdata-sections \
			  -Wl,--strip-all \
			  -Wl,--gc-sections \
			  -Wl,-L$(OBJDIR) \
			  -Wl,-Map=output.map \
			  -Wl,--script=$(LKRDIR)\$(PROC)\$(PROC).ld \
			  -D __P32GCC__ \
			  -D __PIC32MX__ \
			  -D __$(PROC)__ \
			  -D USB_MAJOR_VER=$(MAJ_VER) \
			  -D USB_MINOR_VER=$(MIN_VER) \
			  -D USB_DOT_VER=$(DOT_VER)

#			  -T$(LKRDIR)\elf32pic32mx.x

#-----------------------------------------------------------------------
# Rules
#-----------------------------------------------------------------------
#
#	$$(L) 	Le nom de la cible
#	$< 	Le nom de la première dépendance
#	$^ 	La liste des dépendances
#	$? 	La liste des dépendances plus récentes que la cible
#	$* 	Le nom du fichier sans suffixe
#
#-----------------------------------------------------------------------

all: start clean copy $(PRJ).elf convert fix size

start:
ifeq ($(DEFAULT), YES)
	@echo No Processor has been defined.
	@echo Usage ex. : make --makefile=Makefile.windows PROC=32MX250F128B [DEBUG=yes]
	@echo Using 32MX270F256B as default processor
endif
	@echo Compiling $(PRJ)

clean:
	@echo Cleaning all build files
	$(L)if exist $(OBJDIR)\non-free\processor.o $(L)$(RM) $(OBJDIR)\non-free\processor.o > NUL
#	$(RM) $(OBJDIR)\*.o
#	$(RM) $(OBJDIR)\*.S
#	$(RM) $(HEXDIR)\*.elf
#	$(L)$(RM) $(HEXDIR)\*.hex			> NUL

copy:
	@echo Adding $(PROC) SFR definition
	$(L)$(CP) $(OBJDIR)\non-free\$(PROC).o $(OBJDIR)\non-free\processor.o > NUL

$(OBJDIR)\%.o: \%.c
	@echo Compiling $<
	$(L)$(CC) $(ELF_FLAGS) $(LDFLAGS) $(CFLAGS) $(MIPS16_OPT) -c $< -o $$(L)
ifdef DEBUG
	@echo Disassembling all files
	$(L)$(OBJDUMP) -D -M intel -S $$(L) > obj\$*.S
	cat obj\$*.S
endif

$(PRJ).elf: $(OBJS)
	@echo Linking all the modules together
	$(L)$(CC) $(ELF_FLAGS) $(LDFLAGS) $(CFLAGS) -o hex\$$(L) $^ \
		$(LKRDIR)\crt0.S \
		$(OBJDIR)\non-free\processor.o \
		$(LIBS)
#		$(INCDIR)\p32xxxx.h \

convert:
	@echo Converting elf to hex
	$(L)$(OBJCOPY) -O ihex $(HEXDIR)\$(PRJ).elf $(HEXDIR)\$(PRJ).hex

fix:
	@echo Fixing bad records
	$(L)sed -i -e 's\:020000049D005D\:020000041D00DD\g' $(HEXDIR)\$(PRJ).hex
	$(L)sed -i -e 's\:020000049FC09B\:020000041FC01B\g' $(HEXDIR)\$(PRJ).hex
	$(L)sed -i -e 's\:02000004BFC07B\:020000041FC01B\g' $(HEXDIR)\$(PRJ).hex
	$(L)sed -i -e '\$(BADRECORD)\d' $(HEXDIR)\$(PRJ).hex

size:
ifdef DEBUG
	$(L)tools\codesize.py $(HEXDIR)\$(PRJ).hex DEBUG=yes
	$(L)$(SIZE) $(HEXDIR)\$(PRJ).hex
else
	$(L)tools\codesize.py $(HEXDIR)\$(PRJ).hex
endif

burn:
	$(L)tools\pic32prog -S -p $(HEXDIR)\$(PRJ).hex
