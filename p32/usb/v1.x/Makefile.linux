################################################################################
#                                                                              #
#   Pinguino Bootloader v0.x                                                   #
#   32-bit USB HID Bootloader                                                  #
#   Author : Régis Blanchot <rblanchot@gmail.com>                              #
#                                                                              #
#   Usage :                                                                    #
#     make --makefile=Makefile.linux [PROC=32MX250F128B] [MIPS16=true] [DEBUG=true] #
#                                                                              #
#   Supported CPU :                                                            #
#     32MX220F032B                                                             #
#     32MX250F128B                                                             #
#     32MX270F256B                                                             #
#     32MX470F512H                                                             #
#                                                                              #
#   This file is part of Pinguino Project (http://www.pinguino.cc)             #
#   Released under the LGPL license (www.gnu.org/licenses/lgpl.html)           #
#                                                                              #
################################################################################

_TEST_ENABLE_	= true

ifeq "$(MIPS16)" "true"
	_MIPS16_ENABLE_	= true
else
	_MIPS16_ENABLE_	= false
endif

_OVCLCK_ENABLE_	= false

ifeq "$(DEBUG)" "true"
	_DEBUG_ENABLE_ = 1
else
	_DEBUG_ENABLE_ = 0
endif

# Where to find the gcc-mips-elf toolchain
#BINDIR		= /usr/bin
#BINDIR		= /dvpt/pinguino/git-copy/pinguino-compilers/linux64/p32/bin
BINDIR		= /opt/pinguino/p32/bin

# ----------------------------------------------------------------------
# Version (will override boot.h #define)
# ----------------------------------------------------------------------

MAJ_VER		= 1
MIN_VER		= 4

# ----------------------------------------------------------------------
# Processor family
# ----------------------------------------------------------------------

ifndef PROC
	PROC	= 32MX270F256B
	DEFAULT = YES
endif 

FAMILYMZ	= $(findstring 32MZ,  $(PROC))
FAMILYMX1	= $(findstring 32MX1, $(PROC))
FAMILYMX2	= $(findstring 32MX2, $(PROC))
FAMILY		= $(FAMILYMX1)$(FAMILYMX2)$(FAMILYMZ)

CRYSTAL		= 8
TOOL		= PK3

# ----------------------------------------------------------------------
# Overclock (possible values : 42, 48, 60, 64)
# ----------------------------------------------------------------------

ifeq "$(_OVCLCK_ENABLE_)" "true"
	FCPU=64
else
	FCPU=40
endif

# ----------------------------------------------------------------------
# Project's name
# ----------------------------------------------------------------------

ifeq "$(_TEST_ENABLE_)" "true"
	PRJ		= Test
else
#	PRJ		= Bootloader_v$(MAJ_VER).$(MIN_VER)_$(PROC)_$(FCPU)MHz
	PRJ		= Bootloader_v$(MAJ_VER).$(MIN_VER)_$(PROC)_X$(CRYSTAL)MHz
endif

# ----------------------------------------------------------------------
# MIPS Core
# ----------------------------------------------------------------------
# PIC32MX has a MIPS M4K core
# PIC32MZ has a MIPS microAptiv core

ifeq "$(FAMILY)" "32MZ"
	CORE		= m14k
	#CORE		= m14kc
else
	#CORE		= 24kc
	CORE		= m4k
endif

# ----------------------------------------------------------------------
# Colors
# ----------------------------------------------------------------------

RED=\033[31;1m
GREEN=\033[32;1m
YELLOW=\033[33;1m
BLUE=\033[34;1m
BOLD=\033[0;1;31m
NORM=\033[0m

WARNING=$(YELLOW)
ERROR=$(RED)
NORMAL=$(GREEN)
END=$(NORM)

# ----------------------------------------------------------------------
# Directories
# ----------------------------------------------------------------------

ORIGIN		= $(shell pwd)
SRCDIR		= $(ORIGIN)
HEXDIR		= $(ORIGIN)/hex
INCDIR		= $(ORIGIN)
LKRDIR		= $(ORIGIN)/lkr
OBJDIR		= $(ORIGIN)/obj/non-free

INCLUDEDIRS	= -I$(LKRDIR) \
			  -I$(OBJDIR) \
			  -I$(INCDIR) \
			  -I$(INCDIR)/non-free

# -lc -lgcc -lm
LIBS		= -lc
LIBDIRS		=

# ----------------------------------------------------------------------
# Files
# ----------------------------------------------------------------------

ifeq "$(_TEST_ENABLE_)" "true"
	SRCS	= test.c delay.c core.c serial.c
else
	ALLSRCS	= $(wildcard *.c)
	ifeq "$(_DEBUG_ENABLE_)" "true"
		SRCS	= $(filter-out test.c, $(ALLSRCS))
	else
		SRCS	= $(filter-out test.c serial.c, $(ALLSRCS))
	endif
endif

OBJS		= $(SRCS:%.c=obj/%.o)

# ----------------------------------------------------------------------
# Commands
# ----------------------------------------------------------------------

CC			= $(BINDIR)/p32-gcc
OBJCOPY		= $(BINDIR)/p32-objcopy
SIZE		= $(BINDIR)/p32-size
OBJDUMP		= $(BINDIR)/p32-objdump
RM			= rm -f -v
CP			= cp
MV			= mv

# ----------------------------------------------------------------------
# Flags
# ----------------------------------------------------------------------
# https://sourceware.org/binutils/docs/ld/Options.html#Options

ifeq "$(_MIPS16_ENABLE_)" "true"
	# Generate MIPS16 code.
	MIPS16_OPT=-mips16
	# makes non-MIPS16 and MIPS16 code link-compatible.
	MIPS16_INTER=-minterlink-mips16
endif

CFLAGS		= -fdollars-in-identifiers $(INCLUDEDIRS)

LDFLAGS		= $(LIBDIRS) $(LIBS)
#LDFLAGS	   += -G0
#--verbose

#-nostdlib		Only search library directories explicitly specified on the command line
#-static		Do not link against shared libraries
#--strip-all	Omit all symbol information from the output file
#--gc-sections	Enable garbage collection of unused input sections
#-Map=mapfile	Print a link map to the file mapfile
    
ELF_FLAGS	= -march=$(CORE) \
			  -EL -nostdlib -static \
			  -Os $(MIPS16_INTER) \
			  -ffunction-sections \
			  -fdata-sections \
			  -Wl,--strip-all \
			  -Wl,--gc-sections \
			  -Wl,-L$(OBJDIR) \
			  -Wl,-Map=output.map \
			  -D __P32GCC__ \
			  -D __PIC32MX__ \
			  -D __$(PROC)__ \
			  -D TEST=$(_TEST_ENABLE_) \
			  -D _DEBUG_ENABLE_=$(_DEBUG_ENABLE_) \
			  -D FCPUMHZ=$(FCPU) \
			  -D USB_MAJOR_VER=$(MAJ_VER) \
			  -D USB_MINOR_VER=$(MIN_VER) \
			  -T$(LKRDIR)/$(PROC).ld \
			  -T$(LKRDIR)/elf32pic32mx.x

#			  -D USB_DOT_VER=$(DOT_VER) \
#			  -Wl,--script=$(LKRDIR)/$(PROC).ld
#			  -T$(LKRDIR)/elf32pic32mx.x

#-----------------------------------------------------------------------
# Rules
#-----------------------------------------------------------------------
#
#	$@ 	Le nom de la cible
#	$< 	Le nom de la première dépendance
#	$^ 	La liste des dépendances
#	$? 	La liste des dépendances plus récentes que la cible
#	$* 	Le nom du fichier sans suffixe
#
#-----------------------------------------------------------------------

#all: start clean copy $(PRJ).elf convert fix size burn
#all: start clean copy $(PRJ).elf convert size burn
all: start clean copy $(PRJ).elf convert fix size
#all: start clean copy $(PRJ).elf convert size
#all: start clean copy $(PRJ).elf convert
#all: start clean copy $(PRJ).elf
#all: start
#all: burn

start:
ifeq ($(DEFAULT), YES)
	@echo "$(WARNING)No Processor has been defined.$(END)"
	@echo "$(WARNING)Usage ex. : make --makefile=Makefile PROC=32MX270F256B [DEBUG=true]$(END)"
	@echo "$(WARNING)Using 32MX270F256B as default processor$(END)"
endif
	@echo "$(NORMAL)Building $(PRJ)$(END)"

clean:
	@echo "$(NORMAL)Cleaning all build files$(END)"
	@$(RM) $(OBJDIR)/processor.o	> /dev/null
	@$(RM) $(ORIGIN)/obj/*.o		> /dev/null
	@$(RM) $(ORIGIN)/obj/*.S		> /dev/null
	@$(RM) $(HEXDIR)/*.elf			> /dev/null

copy:
	@echo "$(NORMAL)Adding $(PROC) SFR definition$(END)"
	@$(CP) $(OBJDIR)/$(PROC).o $(OBJDIR)/processor.o

obj/%.o: %.c
	@echo "$(NORMAL)Compiling $<$(END)"
	@$(CC) $(ELF_FLAGS) $(LDFLAGS) $(CFLAGS) $(MIPS16_OPT) -c $< -o $@
ifeq "$(_DEBUG_ENABLE_)" "true"
	@echo "$(WARNING)Disassembling all files$(END)"
	@$(OBJDUMP) -D -M intel -S $@ > obj/$*.S
	cat obj/$*.S
endif

$(PRJ).elf: $(OBJS)
	@echo "$(NORMAL)Linking all the modules together$(END)"
	@$(CC) $(ELF_FLAGS) $(LDFLAGS) $(CFLAGS) -o hex/$@ $^ \
		$(LKRDIR)/crt0.S \
		$(OBJDIR)/processor.o \
		$(INCDIR)/p32xxxx.h \
		$(LIBS)

convert:
	@echo "$(NORMAL)Converting elf to hex$(END)"
	@$(OBJCOPY) -O ihex $(HEXDIR)/$(PRJ).elf $(HEXDIR)/$(PRJ).hex

fix:
	@echo "$(WARNING)Fixing bad records$(END)"
	@sed -i -e 's/:020000049D005D/:020000041D00DD/g' $(HEXDIR)/$(PRJ).hex
	@sed -i -e 's/:020000049FC09B/:020000041FC01B/g' $(HEXDIR)/$(PRJ).hex
	@sed -i -e 's/:02000004BFC07B/:020000041FC01B/g' $(HEXDIR)/$(PRJ).hex

size:
ifeq "$(_DEBUG_ENABLE_)" "true"
	@tools/codesize.py $(HEXDIR)/$(PRJ).hex DEBUG=yes
	@$(SIZE) $(HEXDIR)/$(PRJ).hex
else
	@tools/codesize.py $(HEXDIR)/$(PRJ).hex
endif

# cf. IPECMD.txt
# COMMAND		MEANING					DEFAULT
# -TP<tool>		Tool Selection			None
# -P<proc>		Processor Selection		None 
# -F<file>		Hex File Selection		None 
# -M			Program Device			Do Not Program 
# -W			Externally power target	Power from PM3 

burn:
#	@tools/pic32prog -S -p $(HEXDIR)/$(PRJ).hex
#	C:\Program Files\Microchip\MPLABX\mplab_ide\bin
	@echo "$(WARNING)Burning $(PRJ).hex file$(END)"
	@java -jar /opt/microchip/mplabx/mplab_ipe/ipecmd.jar \
			-M \
			-TP$(TOOL) \
			-P$(PROC) \
			-F$(HEXDIR)/$(PRJ).hex
	@$(RM) MPLABXLog.* > /dev/null
	@$(RM) log.* > /dev/null
