
Discarded input sections

 .text          0x0000000000000000        0x0 obj/test.o
 .data          0x0000000000000000        0x0 obj/test.o
 .bss           0x0000000000000000        0x0 obj/test.o
 .pdr           0x0000000000000000       0x20 obj/test.o
 .text          0x0000000000000000        0x0 obj/delay.o
 .data          0x0000000000000000        0x0 obj/delay.o
 .bss           0x0000000000000000        0x0 obj/delay.o
 .reginfo       0x0000000000000000       0x18 obj/delay.o
 .pdr           0x0000000000000000       0x40 obj/delay.o
 .text          0x0000000000000000        0x0 obj/core.o
 .data          0x0000000000000000        0x0 obj/core.o
 .bss           0x0000000000000000        0x0 obj/core.o
 .reginfo       0x0000000000000000       0x18 obj/core.o
 .pdr           0x0000000000000000       0xa0 obj/core.o
 .text.SoftReset
                0x0000000000000000       0x7c obj/core.o
 .text.MemClear
                0x0000000000000000       0x24 obj/core.o
 .text.MemCopy  0x0000000000000000       0x30 obj/core.o
 .text          0x0000000000000000        0x0 obj/serial.o
 .data          0x0000000000000000        0x0 obj/serial.o
 .bss           0x0000000000000000        0x0 obj/serial.o
 .reginfo       0x0000000000000000       0x18 obj/serial.o
 .pdr           0x0000000000000000       0x80 obj/serial.o
 .data          0x0000000000000000        0x0 /tmp/ccXXfWfk.o
 .bss           0x0000000000000000        0x0 /tmp/ccXXfWfk.o
 .reginfo       0x0000000000000000       0x18 /tmp/ccXXfWfk.o
 .pdr           0x0000000000000000       0x60 /tmp/ccXXfWfk.o
 .text          0x0000000000000000        0x0 /home/regis/Dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/v1.x/obj/non-free/processor.o
 .data          0x0000000000000000        0x0 /home/regis/Dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/v1.x/obj/non-free/processor.o
 .bss           0x0000000000000000        0x0 /home/regis/Dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/v1.x/obj/non-free/processor.o
 .reginfo       0x0000000000000000       0x18 /home/regis/Dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/v1.x/obj/non-free/processor.o
 .text          0x0000000000000000        0x0 /home/regis/Dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/v1.x/obj/non-free/processor.o
 .data          0x0000000000000000        0x0 /home/regis/Dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/v1.x/obj/non-free/processor.o
 .bss           0x0000000000000000        0x0 /home/regis/Dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/v1.x/obj/non-free/processor.o
 .reginfo       0x0000000000000000       0x18 /home/regis/Dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/v1.x/obj/non-free/processor.o

Memory Configuration

Name             Origin             Length             Attributes
kseg0_program_mem 0x000000009d000000 0x0000000000002000 xr
exception_mem    0x000000009d002000 0x0000000000000a00
kseg1_boot_mem   0x00000000bfc00000 0x0000000000000010
kseg0_boot_mem   0x000000009fc00010 0x0000000000000200
boot_software_key 0x00000000a0000000 0x0000000000000004
kseg1_data_mem   0x00000000a0000004 0x000000000001fffc w !x
devcfg3          0x00000000bfc00bf0 0x0000000000000004
devcfg2          0x00000000bfc00bf4 0x0000000000000004
devcfg1          0x00000000bfc00bf8 0x0000000000000004
devcfg0          0x00000000bfc00bfc 0x0000000000000004
devcfg           0x00000000bfc00bf0 0x0000000000000010
sfrs             0x00000000bf800000 0x0000000000100000
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD /opt/pinguino/p32/bin/../lib/gcc/mips-elf/4.9.2/../../../../mips-elf/lib/soft-float/el/libc.a
LOAD obj/test.o
LOAD obj/delay.o
LOAD obj/core.o
LOAD obj/serial.o
LOAD /tmp/ccXXfWfk.o
LOAD /home/regis/Dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/v1.x/obj/non-free/processor.o
LOAD /opt/pinguino/p32/bin/../lib/gcc/mips-elf/4.9.2/../../../../mips-elf/lib/soft-float/el/libc.a
LOAD /home/regis/Dvpt/pinguino/git-local/pinguino-bootloaders/p32/usb/v1.x/obj/non-free/processor.o
                0x000000009d002000                _ebase_address = 0x9d002000
                0x00000000bfc00000                _RESET_ADDR = 0xbfc00000
                0x0000000000000400                PROVIDE (_min_stack_size, 0x400)
                0x0000000000000000                PROVIDE (_min_heap_size, 0x0)
                0x0000000000000001                PROVIDE (_vector_spacing, 0x1)

.reset          0x00000000bfc00000       0x10
 *(.reset)
 .reset         0x00000000bfc00000       0x10 /tmp/ccXXfWfk.o
                0x00000000bfc00000                _reset

.startup        0x000000009fc00010      0x1b0
 *(.startup)
 .startup       0x000000009fc00010      0x1b0 /tmp/ccXXfWfk.o

.devcfg
 *(.devcfg)

.devcfg3        0x00000000bfc00bf0        0x4
 *(.devcfg3)
 .devcfg3       0x00000000bfc00bf0        0x4 obj/test.o
                0x00000000bfc00bf0                devcfg3

.devcfg2        0x00000000bfc00bf4        0x4
 *(.devcfg2)
 .devcfg2       0x00000000bfc00bf4        0x4 obj/test.o
                0x00000000bfc00bf4                devcfg2

.devcfg1        0x00000000bfc00bf8        0x4
 *(.devcfg1)
 .devcfg1       0x00000000bfc00bf8        0x4 obj/test.o
                0x00000000bfc00bf8                devcfg1

.devcfg0        0x00000000bfc00bfc        0x4
 *(.devcfg0)
 .devcfg0       0x00000000bfc00bfc        0x4 obj/test.o
                0x00000000bfc00bfc                devcfg0

.vector_0       0x000000009d002200        0x0
 *(.vector_0)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_0) <= (_vector_spacing << 0x5))), function at exception vector 0 too large)

.vector_1       0x000000009d002220        0x0
 *(.vector_1)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_1) <= (_vector_spacing << 0x5))), function at exception vector 1 too large)

.vector_2       0x000000009d002240        0x0
 *(.vector_2)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_2) <= (_vector_spacing << 0x5))), function at exception vector 2 too large)

.vector_3       0x000000009d002260        0x0
 *(.vector_3)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_3) <= (_vector_spacing << 0x5))), function at exception vector 3 too large)

.vector_4       0x000000009d002280        0x0
 *(.vector_4)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_4) <= (_vector_spacing << 0x5))), function at exception vector 4 too large)

.vector_5       0x000000009d0022a0        0x0
 *(.vector_5)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_5) <= (_vector_spacing << 0x5))), function at exception vector 5 too large)

.vector_6       0x000000009d0022c0        0x0
 *(.vector_6)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_6) <= (_vector_spacing << 0x5))), function at exception vector 6 too large)

.vector_7       0x000000009d0022e0        0x0
 *(.vector_7)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_7) <= (_vector_spacing << 0x5))), function at exception vector 7 too large)

.vector_8       0x000000009d002300        0x0
 *(.vector_8)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_8) <= (_vector_spacing << 0x5))), function at exception vector 8 too large)

.vector_9       0x000000009d002320        0x0
 *(.vector_9)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_9) <= (_vector_spacing << 0x5))), function at exception vector 9 too large)

.vector_10      0x000000009d002340        0x0
 *(.vector_10)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_10) <= (_vector_spacing << 0x5))), function at exception vector 10 too large)

.vector_11      0x000000009d002360        0x0
 *(.vector_11)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_11) <= (_vector_spacing << 0x5))), function at exception vector 11 too large)

.vector_12      0x000000009d002380        0x0
 *(.vector_12)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_12) <= (_vector_spacing << 0x5))), function at exception vector 12 too large)

.vector_13      0x000000009d0023a0        0x0
 *(.vector_13)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_13) <= (_vector_spacing << 0x5))), function at exception vector 13 too large)

.vector_14      0x000000009d0023c0        0x0
 *(.vector_14)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_14) <= (_vector_spacing << 0x5))), function at exception vector 14 too large)

.vector_15      0x000000009d0023e0        0x0
 *(.vector_15)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_15) <= (_vector_spacing << 0x5))), function at exception vector 15 too large)

.vector_16      0x000000009d002400        0x0
 *(.vector_16)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_16) <= (_vector_spacing << 0x5))), function at exception vector 16 too large)

.vector_17      0x000000009d002420        0x0
 *(.vector_17)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_17) <= (_vector_spacing << 0x5))), function at exception vector 17 too large)

.vector_18      0x000000009d002440        0x0
 *(.vector_18)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_18) <= (_vector_spacing << 0x5))), function at exception vector 18 too large)

.vector_19      0x000000009d002460        0x0
 *(.vector_19)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_19) <= (_vector_spacing << 0x5))), function at exception vector 19 too large)

.vector_20      0x000000009d002480        0x0
 *(.vector_20)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_20) <= (_vector_spacing << 0x5))), function at exception vector 20 too large)

.vector_21      0x000000009d0024a0        0x0
 *(.vector_21)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_21) <= (_vector_spacing << 0x5))), function at exception vector 21 too large)

.vector_22      0x000000009d0024c0        0x0
 *(.vector_22)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_22) <= (_vector_spacing << 0x5))), function at exception vector 22 too large)

.vector_23      0x000000009d0024e0        0x0
 *(.vector_23)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_23) <= (_vector_spacing << 0x5))), function at exception vector 23 too large)

.vector_24      0x000000009d002500        0x0
 *(.vector_24)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_24) <= (_vector_spacing << 0x5))), function at exception vector 24 too large)

.vector_25      0x000000009d002520        0x0
 *(.vector_25)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_25) <= (_vector_spacing << 0x5))), function at exception vector 25 too large)

.vector_26      0x000000009d002540        0x0
 *(.vector_26)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_26) <= (_vector_spacing << 0x5))), function at exception vector 26 too large)

.vector_27      0x000000009d002560        0x0
 *(.vector_27)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_27) <= (_vector_spacing << 0x5))), function at exception vector 27 too large)

.vector_28      0x000000009d002580        0x0
 *(.vector_28)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_28) <= (_vector_spacing << 0x5))), function at exception vector 28 too large)

.vector_29      0x000000009d0025a0        0x0
 *(.vector_29)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_29) <= (_vector_spacing << 0x5))), function at exception vector 29 too large)

.vector_30      0x000000009d0025c0        0x0
 *(.vector_30)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_30) <= (_vector_spacing << 0x5))), function at exception vector 30 too large)

.vector_31      0x000000009d0025e0        0x0
 *(.vector_31)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_31) <= (_vector_spacing << 0x5))), function at exception vector 31 too large)

.vector_32      0x000000009d002600        0x0
 *(.vector_32)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_32) <= (_vector_spacing << 0x5))), function at exception vector 32 too large)

.vector_33      0x000000009d002620        0x0
 *(.vector_33)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_33) <= (_vector_spacing << 0x5))), function at exception vector 33 too large)

.vector_34      0x000000009d002640        0x0
 *(.vector_34)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_34) <= (_vector_spacing << 0x5))), function at exception vector 34 too large)

.vector_35      0x000000009d002660        0x0
 *(.vector_35)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_35) <= (_vector_spacing << 0x5))), function at exception vector 35 too large)

.vector_36      0x000000009d002680        0x0
 *(.vector_36)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_36) <= (_vector_spacing << 0x5))), function at exception vector 36 too large)

.vector_37      0x000000009d0026a0        0x0
 *(.vector_37)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_37) <= (_vector_spacing << 0x5))), function at exception vector 37 too large)

.vector_38      0x000000009d0026c0        0x0
 *(.vector_38)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_38) <= (_vector_spacing << 0x5))), function at exception vector 38 too large)

.vector_39      0x000000009d0026e0        0x0
 *(.vector_39)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_39) <= (_vector_spacing << 0x5))), function at exception vector 39 too large)

.vector_40      0x000000009d002700        0x0
 *(.vector_40)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_40) <= (_vector_spacing << 0x5))), function at exception vector 40 too large)

.vector_41      0x000000009d002720        0x0
 *(.vector_41)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_41) <= (_vector_spacing << 0x5))), function at exception vector 41 too large)

.vector_42      0x000000009d002740        0x0
 *(.vector_42)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_42) <= (_vector_spacing << 0x5))), function at exception vector 42 too large)

.vector_43      0x000000009d002760        0x0
 *(.vector_43)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_43) <= (_vector_spacing << 0x5))), function at exception vector 43 too large)

.vector_44      0x000000009d002780        0x0
 *(.vector_44)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_44) <= (_vector_spacing << 0x5))), function at exception vector 44 too large)

.vector_45      0x000000009d0027a0        0x0
 *(.vector_45)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_45) <= (_vector_spacing << 0x5))), function at exception vector 45 too large)

.vector_46      0x000000009d0027c0        0x0
 *(.vector_46)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_46) <= (_vector_spacing << 0x5))), function at exception vector 46 too large)

.vector_47      0x000000009d0027e0        0x0
 *(.vector_47)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_47) <= (_vector_spacing << 0x5))), function at exception vector 47 too large)

.vector_48      0x000000009d002800        0x0
 *(.vector_48)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_48) <= (_vector_spacing << 0x5))), function at exception vector 48 too large)

.vector_49      0x000000009d002820        0x0
 *(.vector_49)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_49) <= (_vector_spacing << 0x5))), function at exception vector 49 too large)

.vector_50      0x000000009d002840        0x0
 *(.vector_50)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_50) <= (_vector_spacing << 0x5))), function at exception vector 50 too large)

.vector_51      0x000000009d002860        0x0
 *(.vector_51)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_51) <= (_vector_spacing << 0x5))), function at exception vector 51 too large)

.vector_52      0x000000009d002880        0x0
 *(.vector_52)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_52) <= (_vector_spacing << 0x5))), function at exception vector 52 too large)

.vector_53      0x000000009d0028a0        0x0
 *(.vector_53)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_53) <= (_vector_spacing << 0x5))), function at exception vector 53 too large)

.vector_54      0x000000009d0028c0        0x0
 *(.vector_54)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_54) <= (_vector_spacing << 0x5))), function at exception vector 54 too large)

.vector_55      0x000000009d0028e0        0x0
 *(.vector_55)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_55) <= (_vector_spacing << 0x5))), function at exception vector 55 too large)

.vector_56      0x000000009d002900        0x0
 *(.vector_56)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_56) <= (_vector_spacing << 0x5))), function at exception vector 56 too large)

.vector_57      0x000000009d002920        0x0
 *(.vector_57)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_57) <= (_vector_spacing << 0x5))), function at exception vector 57 too large)

.vector_58      0x000000009d002940        0x0
 *(.vector_58)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_58) <= (_vector_spacing << 0x5))), function at exception vector 58 too large)

.vector_59      0x000000009d002960        0x0
 *(.vector_59)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_59) <= (_vector_spacing << 0x5))), function at exception vector 59 too large)

.vector_60      0x000000009d002980        0x0
 *(.vector_60)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_60) <= (_vector_spacing << 0x5))), function at exception vector 60 too large)

.vector_61      0x000000009d0029a0        0x0
 *(.vector_61)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_61) <= (_vector_spacing << 0x5))), function at exception vector 61 too large)

.vector_62      0x000000009d0029c0        0x0
 *(.vector_62)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_62) <= (_vector_spacing << 0x5))), function at exception vector 62 too large)

.vector_63      0x000000009d0029e0        0x0
 *(.vector_63)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_63) <= (_vector_spacing << 0x5))), function at exception vector 63 too large)

.text           0x000000009d000000      0x53c
                0x000000009d000000                _text_begin = .
 *(.text .stub .text.* .gnu.linkonce.t.*)
 .text.startup.main
                0x000000009d000000      0x1c4 obj/test.o
                0x000000009d000000                main
 .text.Delayus  0x000000009d0001c4       0x9c obj/delay.o
                0x000000009d0001c4                Delayus
 .text.Delayms  0x000000009d000260       0x34 obj/delay.o
                0x000000009d000260                Delayms
 .text.ResetCoreTimer
                0x000000009d000294        0xc obj/core.o
                0x000000009d000294                ResetCoreTimer
 .text.ReadCoreTimer
                0x000000009d0002a0        0x8 obj/core.o
                0x000000009d0002a0                ReadCoreTimer
 .text.SerialInit
                0x000000009d0002a8      0x148 obj/serial.o
                0x000000009d0002a8                SerialInit
 .text.SerialPrintChar
                0x000000009d0003f0       0x38 obj/serial.o
                0x000000009d0003f0                SerialPrintChar
 .text.SerialPrint
                0x000000009d000428       0x38 obj/serial.o
                0x000000009d000428                SerialPrint
 .text.SerialPrintNumber
                0x000000009d000460       0xcc obj/serial.o
                0x000000009d000460                SerialPrintNumber
 .text          0x000000009d00052c       0x10 /tmp/ccXXfWfk.o
 *(.text.*personality*)
 *(.gnu.warning)
 *(.mips16.fn.*)
 *(.mips16.call.*)
                0x000000009d00053c                _text_end = .

.rodata         0x000000009d00053c       0x34
 *(.rodata .rodata.* .gnu.linkonce.r.*)
 .rodata.str1.4
                0x000000009d00053c       0x34 obj/test.o
 *(.rodata1)
                0x000000009d000570                . = ALIGN (0x4)

.sdata2         0x000000009d000570        0x0
 *(.sdata2 .sdata2.* .gnu.linkonce.s2.*)
                0x000000009d000570                . = ALIGN (0x4)

.sbss2          0x000000009d000570        0x0
 *(.sbss2 .sbss2.* .gnu.linkonce.sb2.*)
                0x000000009d000570                . = ALIGN (0x4)

.eh_frame_hdr
 *(.eh_frame_hdr)

.eh_frame
 *(.eh_frame)

.dbg_data       0x00000000a0000004        0x0
                0x00000000a0000004                . = (. + DEFINED (_DEBUGGER)?0x200:0x0)

.data           0x00000000a0000004        0x0 load address 0x000000009d000570
                0x00000000a0000004                _data_begin = .
 *(.data .data.* .gnu.linkonce.d.*)
 *(.gnu.linkonce.d.*personality*)
 *(.data1)
                0x000000009d000570                _data_image_begin = LOADADDR (.data)

.eh_frame
 *(.eh_frame)
                0x00000000a0008000                _gp = (ALIGN (0x10) + 0x7ff0)

.got
 *(.got.plt)
 *(.got)

.sdata          0x00000000a0000004        0x0 load address 0x000000009d000570
                0x00000000a0000004                _sdata_begin = .
 *(.sdata .sdata.* .gnu.linkonce.s.*)
                0x00000000a0000004                _sdata_end = .

.lit8
 *(.lit8)

.lit4
 *(.lit4)
                0x00000000a0000004                . = ALIGN (0x4)
                0x00000000a0000004                _data_end = .
                0x00000000a0000004                _bss_begin = .

.sbss           0x00000000a0000004        0x0 load address 0x000000009d000570
                0x00000000a0000004                _sbss_begin = .
 *(.dynsbss)
 *(.sbss .sbss.* .gnu.linkonce.sb.*)
 *(.scommon)
                0x00000000a0000004                _sbss_end = .

.bss            0x00000000a0000004        0x0 load address 0x000000009d000570
 *(.dynbss)
 *(.bss .bss.* .gnu.linkonce.b.*)
 *(COMMON)
                0x00000000a0000004                . = ALIGN (0x4)
                0x00000000a0000004                . = ALIGN (0x4)
                0x00000000a0000004                _end = .
                0x00000000a0000004                _bss_end = .

.heap           0x00000000a0000004        0x0
                0x00000000a0000004                _heap = .
                0x00000000a0000004                . = (. + _min_heap_size)

.stack          0x00000000a0000004      0x400
                0x00000000a0000004                _splim = .
                0x00000000a0000004                _SPLIM = .
                0x00000000a0000404                . = (. + _min_stack_size)
 *fill*         0x00000000a0000004      0x400 

.ramfunc        0x00000000a0000800        0x0 load address 0x000000009d000570
                0x00000000a0000800                _ramfunc_begin = .
 *(.ramfunc .ramfunc.*)
                0x00000000a0000800                . = ALIGN (0x4)
                0x00000000a0000800                _ramfunc_end = .
                0x000000009d000570                _ramfunc_image_begin = LOADADDR (.ramfunc)
                0x0000000000000000                _ramfunc_length = SIZEOF (.ramfunc)
                0x00000000000007fc                _bmxdkpba_address = (_ramfunc_begin - ORIGIN (kseg1_data_mem))
                0x000000000001fffc                _bmxdudba_address = 0x1fffc
                0x000000000001fffc                _bmxdupba_address = 0x1fffc
                0x00000000a0020000                _stack = (_ramfunc_length > 0x0)?(_ramfunc_begin - 0x4):(ORIGIN (kseg1_data_mem) + 0x1fffc)
                0x0000000000000001                ASSERT (((_min_stack_size + _min_heap_size) <= (_stack - _heap)), Not enough space to allocate both stack and heap.  Reduce heap and/or stack size.)

.pdr
 *(.pdr)

.reginfo        0x0000000000000000       0x18
 *(.reginfo)
 .reginfo       0x0000000000000000       0x18 obj/test.o
OUTPUT(hex/Test.elf elf32-littlemips)

.mdebug.abi32   0x0000000000000000        0x0
 .mdebug.abi32  0x0000000000000000        0x0 obj/test.o
 .mdebug.abi32  0x0000000000000000        0x0 obj/delay.o
 .mdebug.abi32  0x0000000000000000        0x0 obj/core.o
 .mdebug.abi32  0x0000000000000000        0x0 obj/serial.o

.comment        0x0000000000000000       0x11
 .comment       0x0000000000000000       0x11 obj/test.o
                                         0x12 (size before relaxing)
 .comment       0x0000000000000000       0x12 obj/delay.o
 .comment       0x0000000000000000       0x12 obj/core.o
 .comment       0x0000000000000000       0x12 obj/serial.o

.gnu.attributes
                0x0000000000000000       0x10
 .gnu.attributes
                0x0000000000000000       0x10 obj/test.o
 .gnu.attributes
                0x0000000000000010       0x10 obj/delay.o
 .gnu.attributes
                0x0000000000000020       0x10 obj/core.o
 .gnu.attributes
                0x0000000000000030       0x10 obj/serial.o
